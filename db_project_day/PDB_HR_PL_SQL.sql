-- PL/SQL
-- 1. PL/SQL
BEGIN
    DBMS_OUTPUT.PUT_LINE('Hello World');
END;
/

-- 1. 변수
-- 1) 변수의 값 대입
DECLARE
    val_num NUMBER;
BEGIN
    val_num := 100;
    DBMS_OUTPUT.PUT_LINE(val_num);
END;
/

-- 변수의 선언 및 할당을 하고 그 변수 값을 출력한다
DESC EMPLOYEES; -- 변수에 할당할 칼럼의 자료형 확인
DECLARE
    VEMPLOYEE_ID NUMBER(6);
    VFIRST_NAME VARCHAR2(20);
BEGIN
    VEMPLOYEE_ID := 105;
    VFIRST_NAME := 'David';
    
    DBMS_OUTPUT.PUT_LINE('사번 / 이름');
    DBMS_OUTPUT.PUT_LINE('----------');
    DBMS_OUTPUT.PUT_LINE(VEMPLOYEE_ID||' / '||VFIRST_NAME);
END;
/
-- 2) 스칼라 변수/ 레퍼런스 변수
-- (1) 스칼라 : SQL에서의 자료형 지정과 거의 동일
VEMPLOYEE_ID NUMBER(6);
VFIRST_NAME VARCHAR2(20);
-- (2) 레퍼런스 : %TYPE 속성과 %ROWTYPE 속성
VEMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
VFIRST_NAME EMPLOYEES.FIRST_NAME%TYPE;
-- %ROWTYPE : 로우 단위 참조
VEMPLOYEES EMLOYEES%ROWTYPE;

-- 3) PL/SQL에서 SQL문장
-- 조회된 컬럼의 결과를 변수에 대입시 INTO 절 사용
DECLARE
    -- %TYPE 속성으로 칼럼 단위로 데이터 저장할 수 있는 레퍼런스 변수 선언
    VEMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
    VFIRST_NAME EMPLOYEES.FIRST_NAME%TYPE; 
BEGIN
    DBMS_OUTPUT.PUT_LINE('사번 / 이름');
    DBMS_OUTPUT.PUT_LINE('----------');
    
    SELECT EMPLOYEE_ID, FIRST_NAME 
    INTO VEMPLOYEE_ID, VFIRST_NAME 
    FROM EMPLOYEES
    WHERE FIRST_NAME = 'Susan';
    
    DBMS_OUTPUT.PUT_LINE(VEMPLOYEE_ID||' / '||VFIRST_NAME);
END;
/

-- 전체 레코드 참조하기 위해서는 %rowtype으로 선언
DECLARE
    VEMPLOYEES EMPLOYEES%ROWTYPE;
BEGIN
    SELECT * INTO VEMPLOYEES FROM EMPLOYEES
    WHERE FIRST_NAME = 'Lisa';
    
    DBMS_OUTPUT.PUT_LINE('사원번호 :'||TO_CHAR(VEMPLOYEES.EMPLOYEE_ID));
    DBMS_OUTPUT.PUT_LINE('이   름 :'||VEMPLOYEES.FIRST_NAME);
    DBMS_OUTPUT.PUT_LINE('급   여 :'||VEMPLOYEES.SALARY);
    DBMS_OUTPUT.PUT_LINE('입사일자 :'||TO_CHAR(VEMPLOYEES.HIRE_DATE,'YYYY-MM-DD'));
END;
/

-- <예제> employees 테이블에 등록된 총사원의 수와 급여의 합, 급여의 평균을 변수에 대입하여 출력하여 보자.
DECLARE
    VEMPLOYEENUM NUMBER;
    VSALARYSUM NUMBER;
    VSALARYAVG NUMBER(10,2);
BEGIN
    SELECT COUNT(EMPLOYEE_ID), SUM(SALARY), ROUND(AVG(SALARY)) 
    INTO VEMPLOYEENUM, VSALARYSUM, VSALARYAVG 
    FROM EMPLOYEES;
    
    DBMS_OUTPUT.PUT_LINE('총사원 수 : '||VEMPLOYEENUM);
    DBMS_OUTPUT.PUT_LINE('급여의 합 : '||VSALARYSUM);
    DBMS_OUTPUT.PUT_LINE('급여의 평균 : '||VSALARYAVG);
END;
/

-- <예제> Jack 사원의 직무, 급여, 입사일자, 부서명을 변수에 대입하여 출력하여 보자.
DECLARE
    JOB VARCHAR2(10);
    SAL NUMBER;
    HIREDATE DATE;
    DEPARTNAME VARCHAR2(10);
BEGIN
    SELECT JOB_ID, SALARY, HIRE_DATE, DEPARTMENT_NAME 
    INTO JOB, SAL, HIREDATE, DEPARTNAME
    FROM EMPLOYEES E INNER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
    WHERE FIRST_NAME = 'Jack';
    
    DBMS_OUTPUT.PUT_LINE('직무 : '||JOB);
    DBMS_OUTPUT.PUT_LINE('급여 : '||SAL);
    DBMS_OUTPUT.PUT_LINE('입사일자 : '||HIREDATE);
    DBMS_OUTPUT.PUT_LINE('부서명 : '||DEPARTNAME);
END;
/

DECLARE
    VEMPLOYEES EMPLOYEES%ROWTYPE;
    VDEPARTMENTS DEPARTMENTS%ROWTYPE;
BEGIN
    SELECT JOB_ID, SALARY, HIRE_DATE, DEPARTMENT_NAME 
    INTO VEMPLOYEES.JOB_ID, VEMPLOYEES.SALARY, VEMPLOYEES.HIRE_DATE, VDEPARTMENTS.DEPARTMENT_NAME
    FROM EMPLOYEES E INNER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
    WHERE FIRST_NAME = 'Jack';
    
    DBMS_OUTPUT.PUT_LINE('직무 : '||VEMPLOYEES.JOB_ID);
    DBMS_OUTPUT.PUT_LINE('급여 : '||VEMPLOYEES.SALARY);
    DBMS_OUTPUT.PUT_LINE('입사일자 : '||VEMPLOYEES.HIRE_DATE);
    DBMS_OUTPUT.PUT_LINE('부서명 : '||VDEPARTMENTS.DEPARTMENT_NAME);
END;
/

-- <예제> 사원 테이블(employees01)에서 사원번호가 제일 큰 사원을 찾아낸 뒤, 이 번호 +3번으로 아래의 사원을 
-- 사원테이블에 신규 입력하는 PL/SQL을 만들어 보자.
CREATE TABLE EMPLOYEES01
AS
SELECT * FROM EMPLOYEES;

SELECT * FROM EMPLOYEES01;

DECLARE
    MAXEMPLOYEE_ID NUMBER;
BEGIN
    SELECT MAX(EMPLOYEE_ID) 
    INTO MAXEMPLOYEE_ID
    FROM EMPLOYEES01;
    
    INSERT INTO EMPLOYEES01(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, SALARY, HIRE_DATE, MANAGER_ID, JOB_ID, DEPARTMENT_ID)
    VALUES(MAXEMPLOYEE_ID+1,'Olivia','Gee','Spring',2800,sysdate,100,'PR_REP',20);
END;
/

SELECT * FROM EMPLOYEES01;
